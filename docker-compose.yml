version: '3.8'

services:
  web:
    build: .
    restart: always
    env_file: .env
    depends_on:
      - db
    ports:
      - "8000:8000"
    volumes:
      - app-data:/app/instance
    networks:
      - app-network
    environment:
      - FLASK_APP=run.py
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@db:5432/waste_registry
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.waste-registry.rule=Host(`${DOMAIN}`)"
      - "traefik.http.services.waste-registry.loadbalancer.server.port=8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:15-alpine
    restart: always
    environment:
      - POSTGRES_DB=waste_registry
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  app-data:
  db-data:

networks:
  app-network:
    driver: bridge
